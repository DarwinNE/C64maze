;
; File generated by cc65 v 2.15
;
	.fopt		compiler,"cc65 v 2.15"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_cgetc
	.export		_labyrinth
	.export		_labyrinthSizeX
	.export		_labyrinthSizeY
	.export		_startx
	.export		_starty
	.export		_positionx
	.export		_positiony
	.export		_style
	.export		_exitx
	.export		_exity
	.export		_orientation
	.export		_f
	.export		_pset
	.export		_clearHGRpage
	.export		_printat
	.export		_clearMazeRegion
	.export		_graphics_monochrome
	.export		_vert_line
	.export		_diag_line
	.export		_hor_line
	.export		_line_br
	.export		_line
	.export		_box
	.export		_loadVICFont
	.export		_leftx
	.export		_lefty
	.export		_rightx
	.export		_righty
	.export		_advancex
	.export		_advancey
	.export		_set_orientation
	.export		_drawLabyrinthView
	.export		_validate_data
	.export		_move_forward
	.export		_move_backwards
	.export		_colour_banner
	.export		_main

.segment	"DATA"

_vic_font:
	.byte	$00
	.byte	$7E
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$7E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$24
	.byte	$24
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$24
	.byte	$24
	.byte	$7E
	.byte	$24
	.byte	$7E
	.byte	$24
	.byte	$24
	.byte	$00
	.byte	$08
	.byte	$1E
	.byte	$28
	.byte	$1C
	.byte	$0A
	.byte	$3C
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$62
	.byte	$64
	.byte	$08
	.byte	$10
	.byte	$26
	.byte	$46
	.byte	$00
	.byte	$30
	.byte	$48
	.byte	$48
	.byte	$30
	.byte	$4A
	.byte	$44
	.byte	$3A
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$08
	.byte	$04
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$00
	.byte	$08
	.byte	$2A
	.byte	$1C
	.byte	$3E
	.byte	$1C
	.byte	$2A
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$3E
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$02
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$20
	.byte	$40
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$46
	.byte	$5A
	.byte	$62
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$28
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$3E
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$02
	.byte	$0C
	.byte	$30
	.byte	$40
	.byte	$7E
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$02
	.byte	$1C
	.byte	$02
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$04
	.byte	$0C
	.byte	$14
	.byte	$24
	.byte	$7E
	.byte	$04
	.byte	$04
	.byte	$00
	.byte	$7E
	.byte	$40
	.byte	$78
	.byte	$04
	.byte	$02
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$1C
	.byte	$20
	.byte	$40
	.byte	$7C
	.byte	$42
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$7E
	.byte	$42
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$42
	.byte	$3C
	.byte	$42
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$42
	.byte	$3E
	.byte	$02
	.byte	$04
	.byte	$38
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$10
	.byte	$0E
	.byte	$18
	.byte	$30
	.byte	$60
	.byte	$30
	.byte	$18
	.byte	$0E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$7E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$70
	.byte	$18
	.byte	$0C
	.byte	$06
	.byte	$0C
	.byte	$18
	.byte	$70
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$02
	.byte	$0C
	.byte	$10
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$1C
	.byte	$22
	.byte	$4A
	.byte	$56
	.byte	$4C
	.byte	$20
	.byte	$1E
	.byte	$00
	.byte	$18
	.byte	$24
	.byte	$42
	.byte	$7E
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$7C
	.byte	$22
	.byte	$22
	.byte	$3C
	.byte	$22
	.byte	$22
	.byte	$7C
	.byte	$00
	.byte	$1C
	.byte	$22
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$22
	.byte	$1C
	.byte	$00
	.byte	$78
	.byte	$24
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$24
	.byte	$78
	.byte	$00
	.byte	$7E
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$40
	.byte	$40
	.byte	$7E
	.byte	$00
	.byte	$7E
	.byte	$40
	.byte	$40
	.byte	$78
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$1C
	.byte	$22
	.byte	$40
	.byte	$4E
	.byte	$42
	.byte	$22
	.byte	$1C
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$7E
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$1C
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$0E
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$44
	.byte	$38
	.byte	$00
	.byte	$42
	.byte	$44
	.byte	$48
	.byte	$70
	.byte	$48
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$7E
	.byte	$00
	.byte	$42
	.byte	$66
	.byte	$5A
	.byte	$5A
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$42
	.byte	$62
	.byte	$52
	.byte	$4A
	.byte	$46
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$18
	.byte	$24
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$24
	.byte	$18
	.byte	$00
	.byte	$7C
	.byte	$42
	.byte	$42
	.byte	$7C
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$18
	.byte	$24
	.byte	$42
	.byte	$42
	.byte	$4A
	.byte	$24
	.byte	$1A
	.byte	$00
	.byte	$7C
	.byte	$42
	.byte	$42
	.byte	$7C
	.byte	$48
	.byte	$44
	.byte	$42
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$40
	.byte	$3C
	.byte	$02
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$3E
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$24
	.byte	$24
	.byte	$18
	.byte	$18
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$5A
	.byte	$5A
	.byte	$66
	.byte	$42
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$24
	.byte	$18
	.byte	$24
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$22
	.byte	$22
	.byte	$22
	.byte	$1C
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$00
	.byte	$7E
	.byte	$02
	.byte	$04
	.byte	$18
	.byte	$20
	.byte	$40
	.byte	$7E
	.byte	$00
	.byte	$3C
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$3C
	.byte	$00
	.byte	$0C
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$70
	.byte	$6E
	.byte	$00
	.byte	$3C
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$1C
	.byte	$2A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$08
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$38
	.byte	$04
	.byte	$3C
	.byte	$44
	.byte	$3A
	.byte	$00
	.byte	$40
	.byte	$40
	.byte	$5C
	.byte	$62
	.byte	$42
	.byte	$62
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$40
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$02
	.byte	$02
	.byte	$3A
	.byte	$46
	.byte	$42
	.byte	$46
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$7E
	.byte	$40
	.byte	$3C
	.byte	$00
	.byte	$0C
	.byte	$12
	.byte	$10
	.byte	$7C
	.byte	$10
	.byte	$10
	.byte	$10
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$46
	.byte	$46
	.byte	$3A
	.byte	$02
	.byte	$3C
	.byte	$40
	.byte	$40
	.byte	$5C
	.byte	$62
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$04
	.byte	$00
	.byte	$0C
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$44
	.byte	$38
	.byte	$40
	.byte	$40
	.byte	$44
	.byte	$48
	.byte	$50
	.byte	$68
	.byte	$44
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$08
	.byte	$1C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$76
	.byte	$49
	.byte	$49
	.byte	$49
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$62
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3C
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$62
	.byte	$62
	.byte	$5C
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$3A
	.byte	$46
	.byte	$46
	.byte	$3A
	.byte	$02
	.byte	$02
	.byte	$00
	.byte	$00
	.byte	$5C
	.byte	$62
	.byte	$40
	.byte	$40
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$3E
	.byte	$40
	.byte	$3C
	.byte	$02
	.byte	$7C
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$7C
	.byte	$10
	.byte	$10
	.byte	$12
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$46
	.byte	$3A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$42
	.byte	$24
	.byte	$18
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$41
	.byte	$49
	.byte	$49
	.byte	$49
	.byte	$36
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$24
	.byte	$18
	.byte	$24
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$42
	.byte	$42
	.byte	$46
	.byte	$3A
	.byte	$02
	.byte	$3C
	.byte	$00
	.byte	$00
	.byte	$7E
	.byte	$04
	.byte	$18
	.byte	$20
	.byte	$7E
	.byte	$00
	.byte	$3C
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$20
	.byte	$3C
	.byte	$00
	.byte	$0C
	.byte	$10
	.byte	$10
	.byte	$3C
	.byte	$10
	.byte	$70
	.byte	$6E
	.byte	$00
	.byte	$3C
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$04
	.byte	$3C
_pix_pos:
	.byte	$80
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$08
	.byte	$04
	.byte	$02
	.byte	$01
_labyrinth:
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$20,$20,$20,$20,$20,$20,$2A
	.byte	$20,$20,$20,$20,$2A,$20,$20,$20,$20,$20,$2A,$20,$2A,$20,$20,$20
	.byte	$2A,$20,$20,$20,$20,$20,$20,$20,$20,$2A,$20,$20,$20,$20,$20,$2A
	.byte	$2A,$20,$2A,$2A,$2A,$2A,$20,$2A,$20,$2A,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$2A,$20,$2A,$20,$2A,$2A,$2A,$20,$2A,$20,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$20,$2A,$20,$2A,$2A,$20,$2A,$2A,$2A,$20,$2A,$20,$2A,$20,$20,$2A
	.byte	$20,$20,$20,$2A,$20,$20,$2A,$20,$20,$20,$2A,$20,$20,$20,$20,$20
	.byte	$2A,$20,$20,$20,$2A,$20,$2A,$20,$20,$2A,$20,$20,$2A,$20,$20,$2A
	.byte	$2A,$20,$20,$20,$2A,$20,$2A,$2A,$20,$2A,$2A,$20,$2A,$20,$2A,$2A
	.byte	$2A,$20,$2A,$2A,$2A,$2A,$2A,$20,$2A,$2A,$2A,$20,$2A,$20,$2A,$20
	.byte	$2A,$2A,$2A,$20,$2A,$2A,$20,$2A,$2A,$2A,$2A,$2A,$2A,$20,$2A,$2A
	.byte	$2A,$2A,$2A,$20,$2A,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20
	.byte	$20,$2A,$2A,$2A,$2A,$2A,$2A,$20,$2A,$20,$2A,$20,$2A,$2A,$2A,$2A
	.byte	$2A,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2A,$20
	.byte	$2A,$2A,$20,$2A,$2A,$2A,$2A,$20,$2A,$20,$2A,$20,$20,$20,$20,$20
	.byte	$2A,$20,$20,$2A,$20,$20,$20,$2A,$2A,$20,$2A,$20,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$20,$2A,$20,$20,$20,$20,$20,$2A,$20
	.byte	$2A,$20,$2A,$20,$2A,$2A,$2A,$2A,$2A,$2A,$20,$2A,$20,$2A,$20,$2A
	.byte	$2A,$20,$2A,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2A,$20,$20,$20
	.byte	$20,$2A,$20,$2A,$2A,$20,$2A,$20,$20,$20,$2A,$20,$2A,$20,$20,$20
	.byte	$20,$20,$2A,$20,$20,$2A,$20,$2A,$2A,$2A,$2A,$2A,$2A,$20,$2A,$2A
	.byte	$2A,$2A,$2A,$20,$2A,$20,$2A,$20,$2A,$20,$20,$2A,$20,$20,$2A,$20
	.byte	$2A,$20,$2A,$20,$2A,$2A,$2A,$2A,$20,$2A,$20,$20,$2A,$20,$20,$2A
	.byte	$2A,$20,$2A,$20,$20,$20,$20,$20,$20,$20,$2A,$20,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$20,$2A,$2A,$20,$2A,$2A,$20,$20,$20,$20,$20,$2A
	.byte	$20,$2A,$2A,$20,$2A,$2A,$2A,$2A,$2A,$20,$2A,$20,$2A,$2A,$2A,$20
	.byte	$2A,$20,$2A,$20,$2A,$20,$20,$20,$20,$20,$2A,$20,$20,$2A,$20,$20
	.byte	$20,$20,$2A,$20,$2A,$2A,$2A,$2A,$20,$2A,$20,$20,$20,$20,$20,$2A
	.byte	$2A,$20,$20,$20,$20,$20,$2A,$2A,$2A,$20,$2A,$20,$2A,$2A,$2A,$2A
	.byte	$2A,$20,$2A,$20,$2A,$2A,$20,$2A,$2A,$2A,$2A,$20,$2A,$20,$20,$2A
	.byte	$20,$2A,$2A,$2A,$2A,$20,$2A,$2A,$2A,$2A,$20,$2A,$2A,$20,$2A,$20
	.byte	$20,$20,$2A,$20,$20,$20,$20,$20,$2A,$20,$2A,$20,$2A,$20,$20,$20
	.byte	$2A,$20,$20,$20,$2A,$20,$2A,$2A,$20,$20,$20,$20,$2A,$20,$20,$2A
	.byte	$2A,$20,$20,$2A,$20,$2A,$2A,$20,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$20
	.byte	$2A,$20,$2A,$20,$2A,$2A,$2A,$20,$2A,$20,$2A,$2A,$2A,$20,$2A,$20
	.byte	$20,$2A,$2A,$20,$2A,$2A,$20,$2A,$2A,$2A,$20,$20,$20,$2A,$20,$20
	.byte	$2A,$20,$20,$20,$20,$20,$20,$20,$20,$20,$20,$2A,$20,$20,$20,$20
	.byte	$20,$2A,$20,$20,$20,$20,$20,$2A,$20,$2A,$20,$20,$20,$20,$20,$20
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A
	.byte	$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$2A,$00
_labyrinthSizeX:
	.byte	$28
_labyrinthSizeY:
	.byte	$11
_startx:
	.byte	$06
_starty:
	.byte	$10
_positionx:
	.byte	$06
_positiony:
	.byte	$10
_style:
	.word	$0001
_exitx:
	.byte	$0D
_exity:
	.byte	$01
_orientation:
	.byte	$00

.segment	"RODATA"

L0832:
	.byte	$44,$2E,$20,$42,$55,$43,$43,$49,$20,$32,$30,$31,$37,$00
L0851:
	.byte	$53,$54,$45,$50,$20,$49,$4E,$21,$00
L085A:
	.byte	$57,$41,$59,$20,$4F,$55,$54,$21,$00
L0817:
	.byte	$43,$36,$34,$4D,$41,$5A,$45,$00
L0828:
	.byte	$46,$2B,$47,$00
L0823:
	.byte	$54,$00
L082D:
	.byte	$56,$00

.segment	"BSS"

_f:
	.res	517,$00
_leftx:
	.res	2,$00
_lefty:
	.res	2,$00
_rightx:
	.res	2,$00
_righty:
	.res	2,$00
_advancex:
	.res	2,$00
_advancey:
	.res	2,$00

; ---------------------------------------------------------------
; void __near__ pset (unsigned int, unsigned int)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_pset: near

.segment	"BSS"

L0312:
	.res	2,$00
L0313:
	.res	2,$00
L0314:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; d=y&0xFFF8;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L0312
	stx     L0312+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L0313
	stx     L0313+1
;
; by=BASE+e+(x&0xFFF8)+((unsigned char)y&7);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0891
	inx
L0891:	sta     L0314
	stx     L0314+1
;
; POKE(by, PEEK(by) | pix_pos[(unsigned char)x&7]);
;
	sta     ptr2
	stx     ptr2+1
	lda     L0314
	sta     ptr1
	lda     L0314+1
	sta     ptr1+1
	lda     (ptr1),y
	sta     sreg
	ldy     #$02
	lda     (sp),y
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ clearHGRpage (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearHGRpage: near

.segment	"CODE"

;
; asm("       ldy #0");
;
	ldy     #0
;
; asm("       tya");
;
	tya
;
; asm("loop:  sta $6000,y"); 
;
loop:	sta     $6000,y
;
; asm("       sta $6100,y");
;
	sta     $6100,y
;
; asm("       sta $6200,y");
;
	sta     $6200,y
;
; asm("       sta $6300,y");
;
	sta     $6300,y
;
; asm("       sta $6400,y");
;
	sta     $6400,y
;
; asm("       sta $6500,y");
;
	sta     $6500,y
;
; asm("       sta $6600,y");
;
	sta     $6600,y
;
; asm("       sta $6700,y");
;
	sta     $6700,y
;
; asm("       sta $6800,y");
;
	sta     $6800,y
;
; asm("       sta $6900,y");
;
	sta     $6900,y
;
; asm("       sta $6A00,y");
;
	sta     $6A00,y
;
; asm("       sta $6B00,y");
;
	sta     $6B00,y
;
; asm("       sta $6C00,y");
;
	sta     $6C00,y
;
; asm("       sta $6D00,y");
;
	sta     $6D00,y
;
; asm("       sta $6E00,y");
;
	sta     $6E00,y
;
; asm("       sta $6F00,y");
;
	sta     $6F00,y
;
; asm("       sta $7000,y");
;
	sta     $7000,y
;
; asm("       sta $7100,y");
;
	sta     $7100,y
;
; asm("       sta $7200,y");
;
	sta     $7200,y
;
; asm("       sta $7300,y");
;
	sta     $7300,y
;
; asm("       sta $7400,y");
;
	sta     $7400,y
;
; asm("       sta $7500,y");
;
	sta     $7500,y
;
; asm("       sta $7600,y");
;
	sta     $7600,y
;
; asm("       sta $7700,y");
;
	sta     $7700,y
;
; asm("       sta $7800,y");
;
	sta     $7800,y
;
; asm("       sta $7900,y");
;
	sta     $7900,y
;
; asm("       sta $7A00,y");
;
	sta     $7A00,y
;
; asm("       sta $7B00,y");
;
	sta     $7B00,y
;
; asm("       sta $7C00,y");
;
	sta     $7C00,y
;
; asm("       sta $7D00,y");
;
	sta     $7D00,y
;
; asm("       sta $7E00,y");
;
	sta     $7E00,y
;
; asm("       sta $7F00,y");
;
	sta     $7F00,y
;
; asm("       iny");
;
	iny
;
; asm("       bne loop");
;
	bne     loop
;
; asm("       lda #3");
;
	lda     #3
;
; asm("loop1: sta $4400,y"); 
;
loop1:	sta     $4400,y
;
; asm("       sta $4500,y");
;
	sta     $4500,y
;
; asm("       sta $4600,y");
;
	sta     $4600,y
;
; asm("       sta $4700,y");
;
	sta     $4700,y
;
; asm("       iny");
;
	iny
;
; asm("       bne loop1");
;
	bne     loop1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ printat (unsigned short, unsigned short, __near__ unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_printat: near

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; unsigned char mm=f.magnification;
;
	jsr     decsp8
	lda     _f+516
	jsr     pusha
;
; unsigned char incrementx=f.incX*mm;
;
	lda     _f+514
	jsr     pusha0
	ldy     #$02
	lda     (sp),y
	jsr     tosumula0
	jsr     pusha
;
; unsigned char incrementy=f.incX*mm;
;
	lda     _f+514
	jsr     pusha0
	ldy     #$03
	lda     (sp),y
	jsr     tosumula0
	jsr     pusha
;
; for (i=0; s[i]!='\0';++i) {
;
	ldy     #$09
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
L0382:	ldy     #$0B
	lda     (sp),y
	ldy     #$09
	clc
	adc     (sp),y
	sta     ptr1
	ldy     #$0C
	lda     (sp),y
	ldy     #$0A
	adc     (sp),y
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	jeq     L0383
;
; for (j=0;j<incrementy;++j) {
;
	ldy     #$07
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
L038B:	ldy     #$08
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	cmp     (sp),y
	txa
	sbc     #$00
	jcs     L038C
;
; a=f.pDesc[f.pos[s[i]]+j/mm];
;
	lda     _f
	ldx     _f+1
	jsr     pushax
	ldy     #$0D
	lda     (sp),y
	ldy     #$0B
	clc
	adc     (sp),y
	sta     ptr1
	ldy     #$0E
	lda     (sp),y
	ldy     #$0C
	adc     (sp),y
	sta     ptr1+1
	ldx     #$00
	lda     (ptr1,x)
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_f+2)
	sta     ptr1
	lda     tmp1
	adc     #>(_f+2)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     #$0E
	jsr     pushwysp
	ldy     #$08
	lda     (sp),y
	jsr     tosudiva0
	jsr     tosaddax
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	ldy     #$04
	sta     (sp),y
;
; t=1;
;
	lda     #$01
	dey
	sta     (sp),y
;
; for(k=0;a!=0;++k){
;
	ldy     #$05
	lda     #$00
	sta     (sp),y
	iny
	sta     (sp),y
L039A:	ldy     #$04
	lda     (sp),y
	beq     L038D
;
; if (a & 0x0001)
;
	and     #$01
	beq     L03A2
;
; pset(x+incrementx-k, y+j);
;
	ldy     #$01
	lda     (sp),y
	clc
	ldy     #$0F
	adc     (sp),y
	pha
	lda     #$00
	iny
	adc     (sp),y
	tax
	pla
	sec
	ldy     #$05
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	ldy     #$0F
	lda     (sp),y
	ldy     #$09
	clc
	adc     (sp),y
	pha
	ldy     #$10
	lda     (sp),y
	ldy     #$0A
	adc     (sp),y
	tax
	pla
	jsr     _pset
;
; if(t==mm){
;
L03A2:	ldy     #$03
	ldx     #$00
	lda     (sp),y
	dey
	cmp     (sp),y
	bne     L03A7
;
; a>>=1;
;
	ldy     #$04
	lda     (sp),y
	lsr     a
	sta     (sp),y
;
; t=1;
;
	lda     #$01
	dey
;
; } else {
;
	jmp     L0893
;
; ++t;
;
L03A7:	iny
	clc
	lda     #$01
	adc     (sp),y
L0893:	sta     (sp),y
;
; for(k=0;a!=0;++k){
;
	ldy     #$05
	lda     #$01
	jsr     addeqysp
	jmp     L039A
;
; for (j=0;j<incrementy;++j) {
;
L038D:	ldy     #$07
	tax
	lda     #$01
	jsr     addeqysp
	jmp     L038B
;
; x+=incrementx;
;
L038C:	iny
	lda     (sp),y
	ldx     #$00
	ldy     #$0F
	jsr     addeqysp
;
; for (i=0; s[i]!='\0';++i) {
;
	ldy     #$09
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0382
;
; }
;
L0383:	ldy     #$11
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ clearMazeRegion (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clearMazeRegion: near

.segment	"CODE"

;
; asm("       ldy #0");
;
	ldy     #0
;
; asm("       tya");
;
	tya
;
; asm("loop2:  sta $6000,y"); 
;
loop2:	sta     $6000,y
;
; asm("       sta $6000+320,y");
;
	sta     $6000+320,y
;
; asm("       sta $6000+2*320,y");
;
	sta     $6000+2*320,y
;
; asm("       sta $6000+3*320,y");
;
	sta     $6000+3*320,y
;
; asm("       sta $6000+4*320,y");
;
	sta     $6000+4*320,y
;
; asm("       sta $6000+5*320,y");
;
	sta     $6000+5*320,y
;
; asm("       sta $6000+6*320,y");
;
	sta     $6000+6*320,y
;
; asm("       sta $6000+7*320,y");
;
	sta     $6000+7*320,y
;
; asm("       sta $6000+8*320,y");
;
	sta     $6000+8*320,y
;
; asm("       sta $6000+9*320,y");
;
	sta     $6000+9*320,y
;
; asm("       sta $6000+10*320,y");
;
	sta     $6000+10*320,y
;
; asm("       sta $6000+11*320,y");
;
	sta     $6000+11*320,y
;
; asm("       sta $6000+12*320,y");
;
	sta     $6000+12*320,y
;
; asm("       sta $6000+13*320,y");
;
	sta     $6000+13*320,y
;
; asm("       sta $6000+14*320,y");
;
	sta     $6000+14*320,y
;
; asm("       sta $6000+15*320,y");
;
	sta     $6000+15*320,y
;
; asm("       sta $6000+16*320,y");
;
	sta     $6000+16*320,y
;
; asm("       sta $6000+17*320,y");
;
	sta     $6000+17*320,y
;
; asm("       sta $6000+18*320,y");
;
	sta     $6000+18*320,y
;
; asm("       sta $6000+19*320,y");
;
	sta     $6000+19*320,y
;
; asm("       sta $6000+20*320,y");
;
	sta     $6000+20*320,y
;
; asm("       sta $6000+21*320,y");
;
	sta     $6000+21*320,y
;
; asm("       sta $6000+22*320,y");
;
	sta     $6000+22*320,y
;
; asm("       sta $6000+23*320,y");
;
	sta     $6000+23*320,y
;
; asm("       sta $6000+24*320,y");
;
	sta     $6000+24*320,y
;
; asm("       sta $6000+25*320,y");
;
	sta     $6000+25*320,y
;
; asm("       iny");
;
	iny
;
; asm("       cpy #200");
;
	cpy     #200
;
; asm("       bne loop2");
;
	bne     loop2
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ graphics_monochrome (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_graphics_monochrome: near

.segment	"CODE"

;
; POKE(56576U,(PEEK(56576U) & 0xFC)|2);    // Second bank for the VIC II
;
	lda     $DD00
	and     #$FC
	ora     #$02
	sta     $DD00
;
; POKE(VIC_II_SCREEN_CHAR,(PEEK(VIC_II_SCREEN_CHAR)&240)|12);
;
	lda     $D018
	and     #$F0
	ora     #$0C
	sta     $D018
;
; POKE(VIC_II_Y_SCROLL,   PEEK(VIC_II_Y_SCROLL)|BMM);     // HGR on
;
	lda     $D011
	ora     #$20
	sta     $D011
;
; clearHGRpage();
;
	jmp     _clearHGRpage

.endproc

; ---------------------------------------------------------------
; void __near__ vert_line (unsigned short, unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_vert_line: near

.segment	"BSS"

L040A:
	.res	2,$00
L040B:
	.res	2,$00
L040C:
	.res	2,$00
L040D:
	.res	1,$00
L040E:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; cc=BASE+(x1&0xFFF8);
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L040E
	txa
	clc
	adc     #$60
	sta     L040E+1
;
; v=pix_pos[(unsigned char)x1&7];
;
	lda     (sp),y
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	sta     L040D
;
; for(;y1<=y2;++y1){
;
L0415:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$00
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L0418
	beq     L0418
;
; }
;
	jmp     incsp6
;
; if((y1&7)==0 && (y1+8)<=y2) {
;
L0418:	iny
	lda     (sp),y
	and     #$07
	jne     L041B
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$08
	bcc     L0421
	inx
L0421:	sec
	ldy     #$00
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L041C
	jne     L041B
;
; d=y1&0xFFF8;
;
L041C:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L040A
	stx     L040A+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L040B
	stx     L040B+1
;
; by=cc+e;
;
	lda     L040E
	clc
	adc     L040B
	pha
	lda     L040E+1
	adc     L040B+1
	tax
	pla
	sta     L040C
	stx     L040C+1
;
; POKE(by, PEEK(by++) | v);
;
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0430
	inx
L0430:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0438
	inx
L0438:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0440
	inx
L0440:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0448
	inx
L0448:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0450
	inx
L0450:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0458
	inx
L0458:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0460
	inx
L0460:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; POKE(by, PEEK(by++) | v);
;
	lda     L040C
	ldx     L040C+1
	jsr     pushax
	lda     L040C
	ldx     L040C+1
	sta     regsave
	stx     regsave+1
	clc
	adc     #$01
	bcc     L0468
	inx
L0468:	sta     L040C
	stx     L040C+1
	ldy     #$00
	lda     (regsave),y
	sta     ptr1
	ldx     #$00
	lda     L040D
	ora     ptr1
	jsr     staspidx
;
; y1+=7; // because the for statement will add 1.
;
	ldy     #$02
	lda     #$07
	jsr     addeqysp
;
; continue;
;
	jmp     L0417
;
; d=y1&0xFFF8;
;
L041B:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L040A
	stx     L040A+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L040B
	stx     L040B+1
;
; by=cc+e+((unsigned char)y1&7);
;
	lda     L040E
	clc
	adc     L040B
	sta     ptr1
	lda     L040E+1
	adc     L040B+1
	sta     ptr1+1
	ldy     #$02
	lda     (sp),y
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0895
	inx
L0895:	sta     L040C
	stx     L040C+1
;
; POKE(by, PEEK(by) | v);
;
	sta     sreg
	stx     sreg+1
	lda     L040C
	sta     ptr1
	lda     L040C+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     ptr1
	lda     L040D
	ora     ptr1
	sta     (sreg),y
;
; for(;y1<=y2;++y1){
;
L0417:	ldy     #$02
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L0415

.endproc

; ---------------------------------------------------------------
; void __near__ diag_line (unsigned short, unsigned short, unsigned short, signed short, signed short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_diag_line: near

.segment	"BSS"

L047A:
	.res	2,$00
L047B:
	.res	2,$00
L047C:
	.res	2,$00
L047D:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; for(i=0;i<=ix;++i){
;
	lda     #$00
	sta     L047D
	sta     L047D+1
L047E:	lda     L047D
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	lda     L047D+1
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L0481
	jne     L047F
;
; d=y1&0xFFF8;
;
L0481:	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L047A
	stx     L047A+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L047B
	stx     L047B+1
;
; by=BASE+e+(x1&0xFFF8)+((unsigned char)y1&7);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$06
	lda     (sp),y
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L0898
	inx
L0898:	sta     L047C
	stx     L047C+1
;
; POKE(by, PEEK(by) | pix_pos[(unsigned char)x1&7]);
;
	sta     ptr2
	stx     ptr2+1
	lda     L047C
	sta     ptr1
	lda     L047C+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	ldy     #$08
	lda     (sp),y
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; if(incx>0)
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L0499
	eor     #$80
L0499:	asl     a
	ldx     #$00
	bcc     L0896
;
; ++x1;
;
	ldy     #$08
	lda     #$01
	jsr     addeqysp
;
; else
;
	jmp     L049B
;
; --x1;
;
L0896:	lda     #$01
	ldy     #$08
	jsr     subeqysp
;
; if(incy>0)
;
L049B:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$01
	txa
	sbc     #$00
	bvs     L049F
	eor     #$80
L049F:	asl     a
	ldx     #$00
	bcc     L0897
;
; ++y1;
;
	ldy     #$06
	lda     #$01
	jsr     addeqysp
;
; else
;
	jmp     L0480
;
; --y1;
;
L0897:	lda     #$01
	ldy     #$06
	jsr     subeqysp
;
; for(i=0;i<=ix;++i){
;
L0480:	inc     L047D
	jne     L047E
	inc     L047D+1
	jmp     L047E
;
; }
;
L047F:	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; void __near__ hor_line (unsigned short, unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_hor_line: near

.segment	"BSS"

L04A4:
	.res	2,$00
L04A5:
	.res	2,$00
L04A6:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; d=y1&0xFFF8;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L04A4
	stx     L04A4+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L04A5
	stx     L04A5+1
;
; by=BASE+e+((unsigned char)y1&7);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	ldy     #$00
	lda     (sp),y
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L089A
	inx
L089A:	sta     L04A6
	stx     L04A6+1
;
; for(;x1<=x2;++x1){
;
L04AE:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$02
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L04B1
	beq     L04B1
;
; }
;
	jmp     incsp6
;
; if((x1&7)==0 && (x1+8)<=x2) {
;
L04B1:	iny
	lda     (sp),y
	and     #$07
	bne     L04B4
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$08
	bcc     L04BA
	inx
L04BA:	sec
	ldy     #$02
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L04B5
	bne     L04B4
;
; POKE(by+(x1&0xFFF8),0xFF);
;
L04B5:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     L04A6
	sta     ptr1
	txa
	adc     L04A6+1
	sta     ptr1+1
	lda     #$FF
	ldy     #$00
	sta     (ptr1),y
;
; x1+=7; // because the for statement will add 1.
;
	ldy     #$04
	ldx     #$00
	lda     #$07
	jsr     addeqysp
;
; continue;
;
	jmp     L04B0
;
; pix_pos[(unsigned char)x1&7]);
;
L04B4:	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     L04A6
	sta     ptr2
	txa
	adc     L04A6+1
	sta     ptr2+1
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     L04A6
	sta     ptr1
	txa
	adc     L04A6+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	ldy     #$04
	lda     (sp),y
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(;x1<=x2;++x1){
;
L04B0:	ldy     #$04
	ldx     #$00
	lda     #$01
	jsr     addeqysp
	jmp     L04AE

.endproc

; ---------------------------------------------------------------
; void __near__ line_br (unsigned short, unsigned short, unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_line_br: near

.segment	"BSS"

L04CF:
	.res	2,$00
L04D0:
	.res	2,$00
L04D1:
	.res	2,$00
L04D2:
	.res	2,$00
L04D3:
	.res	2,$00
L04D4:
	.res	2,$00
L04D5:
	.res	2,$00
L04D6:
	.res	2,$00
L04D7:
	.res	2,$00
L04D8:
	.res	1,$00
L04D9:
	.res	2,$00
L04DA:
	.res	2,$00
L04DB:
	.res	2,$00
L04DC:
	.res	1,$00
L04DD:
	.res	1,$00
L04DE:
	.res	2,$00
L04DF:
	.res	2,$00
L04E0:
	.res	2,$00
L04E1:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; dx=x2-x1;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$06
	sbc     (sp),y
	sta     L04CF
	txa
	iny
	sbc     (sp),y
	sta     L04CF+1
;
; dy=y2-y1;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	sta     L04D0
	txa
	iny
	sbc     (sp),y
	sta     L04D0+1
;
; incx=a_sign(dx);
;
	lda     L04CF
	cmp     #$01
	lda     L04CF+1
	sbc     #$00
	bvs     L04EA
	eor     #$80
L04EA:	bpl     L04EB
	ldx     #$00
	lda     #$01
	jmp     L04F4
L04EB:	lda     L04CF
	ora     L04CF+1
	bne     L04F2
	tax
	jmp     L04F4
L04F2:	ldx     #$FF
	txa
L04F4:	sta     L04D1
	stx     L04D1+1
;
; incy=a_sign(dy);
;
	lda     L04D0
	cmp     #$01
	lda     L04D0+1
	sbc     #$00
	bvs     L04FB
	eor     #$80
L04FB:	bpl     L04FC
	ldx     #$00
	lda     #$01
	jmp     L0505
L04FC:	lda     L04D0
	ora     L04D0+1
	bne     L0503
	tax
	jmp     L0505
L0503:	ldx     #$FF
	txa
L0505:	sta     L04D2
	stx     L04D2+1
;
; ix=a_abs(dx);
;
	lda     L04CF
	cmp     #$01
	lda     L04CF+1
	sbc     #$00
	bvs     L050C
	eor     #$80
L050C:	bpl     L050D
	lda     L04CF
	ldx     L04CF+1
	jmp     L0510
L050D:	lda     L04CF
	ldx     L04CF+1
	jsr     negax
L0510:	sta     L04D3
	stx     L04D3+1
;
; iy=a_abs(dy);
;
	lda     L04D0
	cmp     #$01
	lda     L04D0+1
	sbc     #$00
	bvs     L0517
	eor     #$80
L0517:	bpl     L0518
	lda     L04D0
	ldx     L04D0+1
	jmp     L051B
L0518:	lda     L04D0
	ldx     L04D0+1
	jsr     negax
L051B:	sta     L04D4
	stx     L04D4+1
;
; inc=a_max(ix, iy);
;
	lda     L04D3
	sec
	sbc     L04D4
	sta     tmp1
	lda     L04D3+1
	sbc     L04D4+1
	ora     tmp1
	bcc     L0524
	beq     L0524
	lda     L04D3
	ldx     L04D3+1
	jmp     L0527
L0524:	lda     L04D4
	ldx     L04D4+1
L0527:	sta     L04D5
	stx     L04D5+1
;
; plotx=x1;
;
	ldy     #$07
	lda     (sp),y
	sta     L04D6+1
	dey
	lda     (sp),y
	sta     L04D6
;
; ploty=y1;
;
	dey
	lda     (sp),y
	sta     L04D7+1
	dey
	lda     (sp),y
	sta     L04D7
;
; changey=TRUE;
;
	lda     #$FF
	sta     L04D8
;
; x=0;
;
	lda     #$00
	sta     L04D9
	sta     L04D9+1
;
; y=0;
;
	sta     L04DA
	sta     L04DA+1
;
; style_mask=style;
;
	lda     _style
	sta     L04DB
	lda     _style+1
	sta     L04DB+1
;
; plot=FALSE;
;
	lda     #$00
	sta     L04DC
;
; d=y&0xFFF8;
;
	lda     L04DA
	and     #$F8
	sta     L04DD
;
; e=d*40;
;
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	sta     L04DE
	stx     L04DE+1
;
; by=BASE+e+(x&0xFFF8)+((unsigned char)y&7);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	lda     L04D9
	and     #$F8
	clc
	adc     ptr1
	sta     ptr1
	lda     L04D9+1
	adc     ptr1+1
	sta     ptr1+1
	lda     L04DA
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L089C
	inx
L089C:	sta     L04DF
	stx     L04DF+1
;
; POKE(by, PEEK(by) | pix_pos[(unsigned char)x&7]);
;
	sta     ptr2
	stx     ptr2+1
	lda     L04DF
	sta     ptr1
	lda     L04DF+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     L04D9
	and     #$07
	sta     ptr1
	tya
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0; i<=inc; ++i) {
;
	tya
	sta     L04E1
	sta     L04E1+1
L0548:	lda     L04E1
	sec
	sbc     L04D5
	sta     tmp1
	lda     L04E1+1
	sbc     L04D5+1
	ora     tmp1
	bcc     L054B
	beq     L054B
;
; }
;
	jmp     incsp8
;
; x += ix;
;
L054B:	lda     L04D3
	clc
	adc     L04D9
	sta     L04D9
	lda     L04D3+1
	adc     L04D9+1
	sta     L04D9+1
;
; y += iy;
;
	lda     L04D4
	clc
	adc     L04DA
	sta     L04DA
	lda     L04D4+1
	adc     L04DA+1
	sta     L04DA+1
;
; if (x>inc) {
;
	lda     L04D9
	sec
	sbc     L04D5
	sta     tmp1
	lda     L04D9+1
	sbc     L04D5+1
	ora     tmp1
	bcc     L0555
	beq     L0555
;
; plot=TRUE;
;
	lda     #$FF
	sta     L04DC
;
; x-=inc;
;
	lda     L04D5
	eor     #$FF
	sec
	adc     L04D9
	sta     L04D9
	lda     L04D5+1
	eor     #$FF
	adc     L04D9+1
	sta     L04D9+1
;
; plotx +=incx;
;
	lda     L04D1
	clc
	adc     L04D6
	sta     L04D6
	lda     L04D1+1
	adc     L04D6+1
	sta     L04D6+1
;
; if (y>inc) {
;
L0555:	lda     L04DA
	sec
	sbc     L04D5
	sta     tmp1
	lda     L04DA+1
	sbc     L04D5+1
	ora     tmp1
	bcc     L055D
	beq     L055D
;
; plot=TRUE;
;
	lda     #$FF
	sta     L04DC
;
; y-=inc;
;
	lda     L04D5
	eor     #$FF
	sec
	adc     L04DA
	sta     L04DA
	lda     L04D5+1
	eor     #$FF
	adc     L04DA+1
	sta     L04DA+1
;
; ploty +=incy;
;
	lda     L04D2
	clc
	adc     L04D7
	sta     L04D7
	lda     L04D2+1
	adc     L04D7+1
	sta     L04D7+1
;
; changey=TRUE;
;
	lda     #$FF
	sta     L04D8
;
; if (plot && style_mask & 0x001) {
;
L055D:	lda     L04DC
	jeq     L0567
	lda     L04DB
	and     #$01
	jeq     L0567
;
; plot=FALSE;
;
	lda     #$00
	sta     L04DC
;
; if(changey==TRUE) {
;
	lda     L04D8
	cmp     #$FF
	bne     L056D
;
; changey=FALSE;
;
	lda     #$00
	sta     L04D8
;
; d=ploty&0xFFF8;
;
	lda     L04D7
	and     #$F8
	sta     L04DD
;
; e=d*40;
;
	lda     L04DD
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	sta     L04DE
	stx     L04DE+1
;
; ypos=BASE+e+((unsigned char)ploty&0x07);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	lda     L04D7
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L089D
	inx
L089D:	sta     L04E0
	stx     L04E0+1
;
; by=ypos+(plotx&0xFFF8);
;
L056D:	lda     L04D6
	and     #$F8
	clc
	adc     L04E0
	pha
	lda     L04D6+1
	adc     L04E0+1
	tax
	pla
	sta     L04DF
	stx     L04DF+1
;
; POKE(by, PEEK(by) | pix_pos[(unsigned char)plotx&0x07]);
;
	sta     ptr2
	stx     ptr2+1
	lda     L04DF
	sta     ptr1
	lda     L04DF+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	lda     L04D6
	and     #$07
	sta     ptr1
	tya
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; style_mask >>= 1;
;
L0567:	lda     L04DB
	ldx     L04DB+1
	jsr     shrax1
	sta     L04DB
	stx     L04DB+1
;
; if(style_mask==0) style_mask=style;
;
	cpx     #$00
	bne     L054A
	cmp     #$00
	bne     L054A
	lda     _style
	sta     L04DB
	lda     _style+1
	sta     L04DB+1
;
; for(i=0; i<=inc; ++i) {
;
L054A:	inc     L04E1
	jne     L0548
	inc     L04E1+1
	jmp     L0548

.endproc

; ---------------------------------------------------------------
; void __near__ line (unsigned short, unsigned short, unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_line: near

.segment	"BSS"

L058B:
	.res	2,$00
L058C:
	.res	2,$00
L058D:
	.res	2,$00
L058E:
	.res	2,$00
L058F:
	.res	2,$00
L0590:
	.res	1,$00
L0591:
	.res	2,$00
L0592:
	.res	2,$00
L0593:
	.res	1,$00
L0594:
	.res	2,$00
L0595:
	.res	2,$00
L0596:
	.res	2,$00
L0597:
	.res	2,$00
L0598:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; if(style!=0x1) {
;
	lda     _style+1
	bne     L08A1
	lda     _style
	cmp     #$01
	beq     L0599
;
; line_br(x1,y1,x2,y2);
;
L08A1:	jsr     decsp6
	ldy     #$0D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _line_br
;
; return;
;
	jmp     incsp8
;
; incx=x2>x1?1:-1;
;
L0599:	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$06
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L05A3
	beq     L05A3
	ldx     #$00
	lda     #$01
	jmp     L05A5
L05A3:	ldx     #$FF
	txa
L05A5:	sta     L058B
	stx     L058B+1
;
; incy=y2>y1?1:-1;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L05A9
	beq     L05A9
	ldx     #$00
	lda     #$01
	jmp     L05AB
L05A9:	ldx     #$FF
	txa
L05AB:	sta     L058C
	stx     L058C+1
;
; ix=((x2-x1)*incx);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$06
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	lda     L058B
	ldx     L058B+1
	jsr     tosumulax
	sta     L058D
	stx     L058D+1
;
; iy=((y2-y1)*incy);
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     pushax
	lda     L058C
	ldx     L058C+1
	jsr     tosumulax
	sta     L058E
	stx     L058E+1
;
; if(ix==0) {
;
	lda     L058D
	ora     L058D+1
	bne     L05B5
;
; if(y1<y2)
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L05B8
;
; vert_line(x1, y1,y2);
;
	jsr     decsp4
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vert_line
;
; else
;
	jmp     incsp8
;
; vert_line(x1, y2,y1);
;
L05B8:	jsr     decsp4
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vert_line
;
; return;
;
	jmp     incsp8
;
; if(iy==0) {
;
L05B5:	lda     L058E
	ora     L058E+1
	bne     L05C3
;
; if(x1<x2)
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	cmp     (sp),y
	txa
	iny
	sbc     (sp),y
	bcs     L05C6
;
; hor_line(x1,x2,y1);
;
	jsr     decsp4
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _hor_line
;
; else
;
	jmp     incsp8
;
; hor_line(x2,x1,y1);
;
L05C6:	jsr     decsp4
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0B
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$09
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _hor_line
;
; return;
;
	jmp     incsp8
;
; if(ix==iy) {
;
L05C3:	lda     L058E
	ldx     L058E+1
	cpx     L058D+1
	bne     L05D1
	cmp     L058D
	bne     L05D1
;
; diag_line(x1,y1,ix,incx,incy);
;
	jsr     decsp8
	ldy     #$0F
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$06
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$0D
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     L058D
	ldy     #$02
	sta     (sp),y
	iny
	lda     L058D+1
	sta     (sp),y
	lda     L058B
	ldy     #$00
	sta     (sp),y
	iny
	lda     L058B+1
	sta     (sp),y
	lda     L058C
	ldx     L058C+1
	jsr     _diag_line
;
; return;
;
	jmp     incsp8
;
; inc=a_max(ix, iy);
;
L05D1:	lda     L058D
	sec
	sbc     L058E
	sta     tmp1
	lda     L058D+1
	sbc     L058E+1
	ora     tmp1
	bcc     L05DF
	beq     L05DF
	lda     L058D
	ldx     L058D+1
	jmp     L05E2
L05DF:	lda     L058E
	ldx     L058E+1
L05E2:	sta     L058F
	stx     L058F+1
;
; changey=TRUE;
;
	lda     #$FF
	sta     L0590
;
; x=0;
;
	lda     #$00
	sta     L0591
	sta     L0591+1
;
; y=0;
;
	sta     L0592
	sta     L0592+1
;
; plot=FALSE;
;
	sta     L0593
;
; d=y1&0xFFF8;
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L0594
	stx     L0594+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L0595
	stx     L0595+1
;
; by=BASE+e+(x1&0xFFF8)+((unsigned char)y1&7);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	ldy     #$04
	lda     (sp),y
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L089F
	inx
L089F:	sta     L0596
	stx     L0596+1
;
; POKE(by, PEEK(by) | pix_pos[(unsigned char)x1&7]);
;
	sta     ptr2
	stx     ptr2+1
	lda     L0596
	sta     ptr1
	lda     L0596+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	ldy     #$06
	lda     (sp),y
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0; i<=inc; ++i) {
;
	tya
	sta     L0598
	sta     L0598+1
L05FD:	lda     L0598
	sec
	sbc     L058F
	sta     tmp1
	lda     L0598+1
	sbc     L058F+1
	ora     tmp1
	bcc     L0600
	beq     L0600
;
; }
;
	jmp     incsp8
;
; x += ix;
;
L0600:	lda     L058D
	clc
	adc     L0591
	sta     L0591
	lda     L058D+1
	adc     L0591+1
	sta     L0591+1
;
; y += iy;
;
	lda     L058E
	clc
	adc     L0592
	sta     L0592
	lda     L058E+1
	adc     L0592+1
	sta     L0592+1
;
; if (x>inc) {
;
	lda     L0591
	sec
	sbc     L058F
	sta     tmp1
	lda     L0591+1
	sbc     L058F+1
	ora     tmp1
	bcc     L060A
	beq     L060A
;
; plot=TRUE;
;
	lda     #$FF
	sta     L0593
;
; x-=inc;
;
	lda     L058F
	eor     #$FF
	sec
	adc     L0591
	sta     L0591
	lda     L058F+1
	eor     #$FF
	adc     L0591+1
	sta     L0591+1
;
; x1 +=incx;
;
	lda     L058B
	ldx     L058B+1
	ldy     #$06
	jsr     addeqysp
;
; if (y>inc) {
;
L060A:	lda     L0592
	sec
	sbc     L058F
	sta     tmp1
	lda     L0592+1
	sbc     L058F+1
	ora     tmp1
	bcc     L0612
	beq     L0612
;
; plot=TRUE;
;
	lda     #$FF
	sta     L0593
;
; y-=inc;
;
	lda     L058F
	eor     #$FF
	sec
	adc     L0592
	sta     L0592
	lda     L058F+1
	eor     #$FF
	adc     L0592+1
	sta     L0592+1
;
; y1 +=incy;
;
	lda     L058C
	ldx     L058C+1
	ldy     #$04
	jsr     addeqysp
;
; changey=TRUE;
;
	lda     #$FF
	sta     L0590
;
; if (plot) {
;
L0612:	lda     L0593
	jeq     L05FF
;
; plot=FALSE;
;
	lda     #$00
	sta     L0593
;
; if(changey==TRUE) {
;
	lda     L0590
	cmp     #$FF
	bne     L0620
;
; changey=FALSE;
;
	lda     #$00
	sta     L0590
;
; d=y1&0xFFF8;
;
	ldy     #$05
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	sta     L0594
	stx     L0594+1
;
; e=d*40;
;
	jsr     pushax
	lda     #$28
	jsr     tosumula0
	sta     L0595
	stx     L0595+1
;
; ypos=BASE+e+((unsigned char)y1&0x07);
;
	sta     ptr1
	txa
	clc
	adc     #$60
	sta     ptr1+1
	ldy     #$04
	lda     (sp),y
	and     #$07
	clc
	adc     ptr1
	ldx     ptr1+1
	bcc     L08A0
	inx
L08A0:	sta     L0597
	stx     L0597+1
;
; by=ypos+(x1&0xFFF8);
;
L0620:	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	and     #$F8
	clc
	adc     L0597
	pha
	txa
	adc     L0597+1
	tax
	pla
	sta     L0596
	stx     L0596+1
;
; POKE(by, PEEK(by) | pix_pos[(unsigned char)x1&0x07]);
;
	sta     ptr2
	stx     ptr2+1
	lda     L0596
	sta     ptr1
	lda     L0596+1
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sta     sreg
	ldy     #$06
	lda     (sp),y
	and     #$07
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_pix_pos)
	sta     ptr1+1
	ldy     #<(_pix_pos)
	lda     (ptr1),y
	ora     sreg
	ldy     #$00
	sta     (ptr2),y
;
; for(i=0; i<=inc; ++i) {
;
L05FF:	inc     L0598
	jne     L05FD
	inc     L0598+1
	jmp     L05FD

.endproc

; ---------------------------------------------------------------
; void __near__ box (unsigned short, unsigned short, unsigned short, unsigned short)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_box: near

.segment	"BSS"

L0637:
	.res	2,$00
L0638:
	.res	2,$00
L0639:
	.res	2,$00
L063A:
	.res	2,$00

.segment	"CODE"

;
; {
;
	jsr     pushax
;
; xul=(x2>x1) ? x1 : x2;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$06
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L063E
	bne     L08A2
L063E:	ldy     #$03
L08A2:	lda     (sp),y
	sta     L0637+1
	dey
	lda     (sp),y
	sta     L0637
;
; yul=(y2>y1) ? y1 : y2;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L0645
	bne     L08A3
L0645:	ldy     #$01
L08A3:	lda     (sp),y
	sta     L0638+1
	dey
	lda     (sp),y
	sta     L0638
;
; xlr=(x2>x1) ? x2 : x1;
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$06
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L08A4
	beq     L08A4
	ldy     #$03
L08A4:	lda     (sp),y
	sta     L0639+1
	dey
	lda     (sp),y
	sta     L0639
;
; ylr=(y2>y1) ? y2 : y1;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$04
	sbc     (sp),y
	sta     tmp1
	txa
	iny
	sbc     (sp),y
	ora     tmp1
	bcc     L08A5
	beq     L08A5
	ldy     #$01
L08A5:	lda     (sp),y
	sta     L063A+1
	dey
	lda     (sp),y
	sta     L063A
;
; if(style==0x1) {
;
	lda     _style+1
	jne     L0657
	lda     _style
	cmp     #$01
	jne     L0657
;
; hor_line(xul, xlr, yul);
;
	jsr     decsp4
	lda     L0637
	ldy     #$02
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L0639
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L0638
	ldx     L0638+1
	jsr     _hor_line
;
; hor_line(xul, xlr, ylr);
;
	jsr     decsp4
	lda     L0637
	ldy     #$02
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L0639
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L063A
	ldx     L063A+1
	jsr     _hor_line
;
; vert_line(xul, yul, ylr);
;
	jsr     decsp4
	lda     L0637
	ldy     #$02
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L0638
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0638+1
	sta     (sp),y
	lda     L063A
	ldx     L063A+1
	jsr     _vert_line
;
; vert_line(xlr, yul, ylr);
;
	jsr     decsp4
	lda     L0639
	ldy     #$02
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L0638
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0638+1
	sta     (sp),y
	lda     L063A
	ldx     L063A+1
	jsr     _vert_line
;
; } else {
;
	jmp     incsp8
;
; line_br(xul, yul, xlr, yul);
;
L0657:	jsr     decsp6
	lda     L0637
	ldy     #$04
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L0638
	ldy     #$02
	sta     (sp),y
	iny
	lda     L0638+1
	sta     (sp),y
	lda     L0639
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L0638
	ldx     L0638+1
	jsr     _line_br
;
; line_br(xlr, yul, xlr, ylr);
;
	jsr     decsp6
	lda     L0639
	ldy     #$04
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L0638
	ldy     #$02
	sta     (sp),y
	iny
	lda     L0638+1
	sta     (sp),y
	lda     L0639
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L063A
	ldx     L063A+1
	jsr     _line_br
;
; line_br(xlr, ylr, xul, ylr);
;
	jsr     decsp6
	lda     L0639
	ldy     #$04
	sta     (sp),y
	iny
	lda     L0639+1
	sta     (sp),y
	lda     L063A
	ldy     #$02
	sta     (sp),y
	iny
	lda     L063A+1
	sta     (sp),y
	lda     L0637
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L063A
	ldx     L063A+1
	jsr     _line_br
;
; line_br(xul, ylr, xul, yul);
;
	jsr     decsp6
	lda     L0637
	ldy     #$04
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L063A
	ldy     #$02
	sta     (sp),y
	iny
	lda     L063A+1
	sta     (sp),y
	lda     L0637
	ldy     #$00
	sta     (sp),y
	iny
	lda     L0637+1
	sta     (sp),y
	lda     L0638
	ldx     L0638+1
	jsr     _line_br
;
; }
;
	jmp     incsp8

.endproc

; ---------------------------------------------------------------
; void __near__ loadVICFont (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_loadVICFont: near

.segment	"CODE"

;
; {
;
	jsr     pusha
;
; for(i=0; i<256; ++i)
;
	jsr     decsp2
	ldy     #$00
	tya
	sta     (sp),y
	iny
	sta     (sp),y
L0680:	ldy     #$01
	lda     (sp),y
	tax
	dey
	cpx     #$01
	bcs     L0681
;
; f.pos[i]=0;
;
	iny
	lda     (sp),y
	sta     tmp1
	dey
	lda     (sp),y
	asl     a
	rol     tmp1
	clc
	adc     #<(_f+2)
	sta     ptr1
	lda     tmp1
	adc     #>(_f+2)
	sta     ptr1+1
	tya
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; for(i=0; i<256; ++i)
;
	tax
	tya
	jsr     addeq0sp
	jmp     L0680
;
; for(i=' '; i<='~'; ++i)
;
L0681:	lda     #$20
	sta     (sp),y
	tya
	iny
	sta     (sp),y
L068B:	ldy     #$01
	lda     (sp),y
	cmp     #$00
	bne     L0692
	dey
	lda     (sp),y
	cmp     #$B2
L0692:	bcs     L068C
;
; f.pos[i]=(i-' '+1)*8;
;
	ldy     #$01
	lda     (sp),y
	sta     tmp1
	dey
	lda     (sp),y
	asl     a
	rol     tmp1
	clc
	adc     #<(_f+2)
	sta     ptr1
	lda     tmp1
	adc     #>(_f+2)
	sta     ptr1+1
	iny
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	sbc     #$20
	bcs     L0698
	dex
L0698:	clc
	adc     #$01
	bcc     L0699
	inx
L0699:	jsr     shlax3
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; for(i=' '; i<='~'; ++i)
;
	ldx     #$00
	tya
	jsr     addeq0sp
	jmp     L068B
;
; f.pDesc=vic_font;
;
L068C:	lda     #<(_vic_font)
	sta     _f
	lda     #>(_vic_font)
	sta     _f+1
;
; f.incX=8;     /* Increment in X (-1 would mean a proportional font) */
;
	lda     #$08
	sta     _f+514
;
; f.incY=8;    /* Increment in Y */
;
	sta     _f+515
;
; f.magnification=magnification;
;
	ldy     #$02
	lda     (sp),y
	sta     _f+516
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ set_orientation (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_orientation: near

.segment	"CODE"

;
; switch(orientation) {
;
	ldx     #$00
	lda     _orientation
;
; }
;
	beq     L06A7
	cmp     #$01
	beq     L08A7
	cmp     #$02
	beq     L08A8
	cmp     #$03
	beq     L08A9
	rts
;
; leftx=-1;
;
L06A7:	lda     #$FF
	sta     _leftx
	sta     _leftx+1
;
; lefty=0;
;
	txa
	sta     _lefty
	sta     _lefty+1
;
; rightx=1;
;
	lda     #$01
	sta     _rightx
	stx     _rightx+1
;
; righty=0;
;
	txa
	sta     _righty
	sta     _righty+1
;
; advancex=0;
;
	sta     _advancex
	sta     _advancex+1
;
; advancey=-1;
;
	dex
;
; break;
;
	jmp     L08AB
;
; leftx=0;
;
L08A7:	txa
	sta     _leftx
	sta     _leftx+1
;
; lefty=1;
;
	lda     #$01
	sta     _lefty
	stx     _lefty+1
;
; rightx=0;
;
	txa
	sta     _rightx
	sta     _rightx+1
;
; righty=-1;
;
	lda     #$FF
	sta     _righty
	sta     _righty+1
;
; advancex=-1;
;
	sta     _advancex
	sta     _advancex+1
;
; break;
;
	jmp     L08AB
;
; leftx=1;
;
L08A8:	lda     #$01
	sta     _leftx
	stx     _leftx+1
;
; lefty=0;
;
	txa
	sta     _lefty
	sta     _lefty+1
;
; rightx=-1;
;
	lda     #$FF
	sta     _rightx
	sta     _rightx+1
;
; righty=0;
;
	txa
	sta     _righty
	sta     _righty+1
;
; advancex=0;
;
	sta     _advancex
	sta     _advancex+1
;
; advancey=1;
;
	lda     #$01
;
; break;
;
	jmp     L08AA
;
; leftx=0;
;
L08A9:	txa
	sta     _leftx
	sta     _leftx+1
;
; lefty=-1;
;
	lda     #$FF
	sta     _lefty
	sta     _lefty+1
;
; rightx=0;
;
	txa
	sta     _rightx
	sta     _rightx+1
;
; righty=1;
;
	lda     #$01
	sta     _righty
	stx     _righty+1
;
; advancex=1;
;
	sta     _advancex
	stx     _advancex+1
;
; advancey=0;
;
L08AB:	txa
L08AA:	sta     _advancey
	stx     _advancey+1
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; void __near__ drawLabyrinthView (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_drawLabyrinthView: near

.segment	"CODE"

;
; unsigned char posx=positionx;
;
	lda     _positionx
	jsr     pusha
;
; unsigned char posy=positiony;
;
	lda     _positiony
	jsr     pusha
;
; unsigned char step=0;
;
	lda     #$00
	jsr     pusha
;
; unsigned char wall=FALSE;
;
	jsr     pusha
;
; unsigned char wayout=FALSE;
;
	jsr     pusha
;
; style=0x1;
;
	sta     _style+1
	lda     #$01
	sta     _style
;
; set_orientation();
;
	jsr     _set_orientation
;
; for(step=0;(wall==FALSE)&&(step<6);++step) {
;
	lda     #$00
	ldy     #$02
L08B2:	sta     (sp),y
	dey
	lda     (sp),y
	jne     L08C1
	iny
	tax
	lda     (sp),y
	cmp     #$06
	jcs     L06E8
;
; }
;
	cmp     #$03
	beq     L08B7
	cmp     #$04
	beq     L08B8
	cmp     #$05
	beq     L08B9
	jmp     L08BA
;
; style=0x2;
;
L08B7:	tya
;
; break;
;
	jmp     L08BD
;
; style=0x8;
;
L08B8:	lda     #$08
;
; break;
;
	jmp     L08BD
;
; style=0x20;
;
L08B9:	lda     #$20
;
; break;
;
	jmp     L08BD
;
; style=0x1;
;
L08BA:	lda     #$01
L08BD:	sta     _style
	stx     _style+1
;
; if(labyrinth[posx+posy*labyrinthSizeX]=='*') {
;
	ldy     #$04
	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     pusha0
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
;
; break;
;
	jeq     L06E8
;
; if(labyrinth[posx+rightx+(posy+righty)*labyrinthSizeX]=='*') {
;
	ldy     #$04
	lda     (sp),y
	clc
	adc     _rightx
	pha
	lda     #$00
	adc     _rightx+1
	tax
	pla
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	clc
	adc     _righty
	pha
	lda     #$00
	adc     _righty+1
	tax
	pla
	jsr     pushax
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
	jne     L0708
;
; line(SIZEX-step*STEPSIZEX,step*STEPSIZEY,
;
	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-(step+1)*STEPSIZEX,(step+1)*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0711
	ldx     #$01
L0711:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0714
	inx
L0714:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     _line
;
; line(SIZEX-step*STEPSIZEX,SIZEY-step*STEPSIZEY,
;
	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-(step+1)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L071A
	ldx     #$01
L071A:	jsr     pushax
;
; } else {
;
	jmp     L08E8
;
; line(SIZEX-step*STEPSIZEX,step*STEPSIZEY,
;
L0708:	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-step*STEPSIZEX,SIZEY-step*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; if(labyrinth[posx+advancex+(posy+advancey)*labyrinthSizeX]!='*') {
;
	ldy     #$04
	lda     (sp),y
	clc
	adc     _advancex
	pha
	lda     #$00
	adc     _advancex+1
	tax
	pla
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	clc
	adc     _advancey
	pha
	lda     #$00
	adc     _advancey+1
	tax
	pla
	jsr     pushax
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
	jeq     L0724
;
; line(SIZEX-(step+1)*STEPSIZEX,(step+1)*STEPSIZEY,
;
	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L072B
	ldx     #$01
L072B:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L072E
	inx
L072E:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-(step+1)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0731
	ldx     #$01
L0731:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0734
	ldx     #$01
L0734:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; line(SIZEX-(step+1)*STEPSIZEX,(step+1)*STEPSIZEY,
;
L0724:	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0738
	ldx     #$01
L0738:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L073B
	inx
L073B:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-(step)*STEPSIZEX,(step+1)*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0740
	inx
L0740:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     _line
;
; line(SIZEX-(step+1)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY,
;
	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0744
	ldx     #$01
L0744:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0747
	ldx     #$01
L0747:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-(step)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
L08E8:	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L074C
	ldx     #$01
L074C:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; if(labyrinth[posx+leftx+(posy+lefty)*labyrinthSizeX]=='*') {
;
	ldy     #$04
	lda     (sp),y
	clc
	adc     _leftx
	pha
	lda     #$00
	adc     _leftx+1
	tax
	pla
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	clc
	adc     _lefty
	pha
	lda     #$00
	adc     _lefty+1
	tax
	pla
	jsr     pushax
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
	jne     L074D
;
; line(step*STEPSIZEX,step*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; (step+1)*STEPSIZEX,(step+1)*STEPSIZEY);
;
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0756
	inx
L0756:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0759
	inx
L0759:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     _line
;
; line(step*STEPSIZEX,SIZEY-step*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; (step+1)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY);
;
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L075F
	inx
L075F:	jsr     pushax
;
; } else {
;
	jmp     L08E7
;
; line(step*STEPSIZEX,step*STEPSIZEY,
;
L074D:	jsr     decsp6
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; step*STEPSIZEX,SIZEY-step*STEPSIZEY);
;
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; if(labyrinth[posx+advancex+(posy+advancey)*labyrinthSizeX]!='*') {
;
	ldy     #$04
	lda     (sp),y
	clc
	adc     _advancex
	pha
	lda     #$00
	adc     _advancex+1
	tax
	pla
	jsr     pushax
	ldy     #$05
	lda     (sp),y
	clc
	adc     _advancey
	pha
	lda     #$00
	adc     _advancey+1
	tax
	pla
	jsr     pushax
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
	beq     L0769
;
; line((step+1)*STEPSIZEX,(step+1)*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0770
	inx
L0770:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0773
	inx
L0773:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; (step+1)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY);
;
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0776
	inx
L0776:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0779
	ldx     #$01
L0779:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; line((step+1)*STEPSIZEX,(step+1)*STEPSIZEY,
;
L0769:	jsr     decsp6
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L077D
	inx
L077D:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0780
	inx
L0780:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; (step)*STEPSIZEX,(step+1)*STEPSIZEY);
;
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0785
	inx
L0785:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     _line
;
; line((step+1)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	ldx     #$00
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0789
	inx
L0789:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L078C
	ldx     #$01
L078C:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; (step)*STEPSIZEX,SIZEY-(step+1)*STEPSIZEY);
;
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
L08E7:	lda     #$0F
	jsr     tosumula0
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	clc
	adc     #$01
	bcc     L0791
	ldx     #$01
L0791:	jsr     pushax
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; posx+=advancex;
;
	lda     _advancex
	ldy     #$04
	clc
	adc     (sp),y
	sta     (sp),y
;
; posy+=advancey;
;
	lda     _advancey
	dey
	clc
	adc     (sp),y
	sta     (sp),y
;
; if (posx==exitx && posy==exity) {
;
	iny
	lda     (sp),y
	cmp     _exitx
	bne     L08C0
	dey
	lda     (sp),y
	cmp     _exity
	bne     L0796
;
; wall=TRUE;
;
	lda     #$FF
	ldy     #$01
	sta     (sp),y
;
; wayout=TRUE;
;
	dey
	sta     (sp),y
;
; if(labyrinth[posx+posy*labyrinthSizeX]=='*') {
;
L0796:	ldy     #$04
L08C0:	lda     (sp),y
	jsr     pusha0
	ldy     #$05
	lda     (sp),y
	jsr     pusha0
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
	bne     L06E9
;
; wall=TRUE;
;
	lda     #$FF
	ldy     #$01
	sta     (sp),y
;
; for(step=0;(wall==FALSE)&&(step<6);++step) {
;
L06E9:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	jmp     L08B2
;
; if(wall==TRUE) 
;
L06E8:	ldy     #$01
L08C1:	lda     (sp),y
	cmp     #$FF
	bne     L07A3
;
; box(step*STEPSIZEX,step*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-step*STEPSIZEX,SIZEY-step*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _box
;
; if(wayout) {
;
L07A3:	ldy     #$00
	lda     (sp),y
	bne     L08E9
;
; }
;
	jmp     incsp5
;
; ++step;
;
L08E9:	ldy     #$02
	clc
	lda     #$01
	adc     (sp),y
	sta     (sp),y
;
; box(step*STEPSIZEX,step*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-step*STEPSIZEX,SIZEY-step*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _box
;
; line(step*STEPSIZEX,step*STEPSIZEY,
;
	jsr     decsp6
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; SIZEX-step*STEPSIZEX,SIZEY-step*STEPSIZEY);
;
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; line(SIZEX-step*STEPSIZEX,step*STEPSIZEY,
;
	jsr     decsp6
	lda     #$C8
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	ldy     #$04
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$02
	sta     (sp),y
	iny
	txa
	sta     (sp),y
;
; step*STEPSIZEX,SIZEY-step*STEPSIZEY);
;
	ldy     #$08
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	ldy     #$00
	sta     (sp),y
	iny
	txa
	sta     (sp),y
	lda     #$C7
	jsr     pusha0
	ldy     #$0A
	lda     (sp),y
	jsr     pusha0
	lda     #$0F
	jsr     tosumula0
	jsr     tossubax
	jsr     _line
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ validate_data (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_validate_data: near

.segment	"CODE"

;
; if(positionx>=labyrinthSizeX)
;
	lda     _positionx
	cmp     _labyrinthSizeX
	bcc     L08EA
;
; positionx=labyrinthSizeX-1;
;
	lda     _labyrinthSizeX
	sec
	sbc     #$01
	sta     _positionx
;
; if(positiony>=labyrinthSizeY)
;
L08EA:	lda     _positiony
	cmp     _labyrinthSizeY
	bcc     L08EB
;
; positiony=labyrinthSizeY-1;
;
	lda     _labyrinthSizeY
	sec
	sbc     #$01
	sta     _positiony
;
; if(positiony<=0)
;
L08EB:	lda     _positiony
	bne     L08EC
;
; positiony=0;
;
	sta     _positiony
;
; if(positiony<=0)
;
L08EC:	lda     _positiony
	bne     L07CB
;
; positiony=0;
;
	sta     _positiony
;
; }
;
L07CB:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_forward (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_forward: near

.segment	"CODE"

;
; switch(orientation) {
;
	lda     _orientation
;
; }
;
	beq     L08EE
	cmp     #$01
	beq     L08EF
	cmp     #$02
	beq     L08F0
	cmp     #$03
	beq     L08F1
	jmp     _validate_data
;
; --positiony;
;
L08EE:	dec     _positiony
;
; break;
;
	jmp     _validate_data
;
; --positionx;
;
L08EF:	dec     _positionx
;
; break;
;
	jmp     _validate_data
;
; ++positiony;
;
L08F0:	inc     _positiony
;
; break;
;
	jmp     _validate_data
;
; ++positionx;
;
L08F1:	inc     _positionx
;
; validate_data();
;
	jmp     _validate_data

.endproc

; ---------------------------------------------------------------
; void __near__ move_backwards (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_backwards: near

.segment	"CODE"

;
; switch(orientation) {
;
	lda     _orientation
;
; }
;
	beq     L08F3
	cmp     #$01
	beq     L08F4
	cmp     #$02
	beq     L08F5
	cmp     #$03
	beq     L08F6
	jmp     _validate_data
;
; ++positiony;
;
L08F3:	inc     _positiony
;
; break;
;
	jmp     _validate_data
;
; ++positionx;
;
L08F4:	inc     _positionx
;
; break;
;
	jmp     _validate_data
;
; --positiony;
;
L08F5:	dec     _positiony
;
; break;
;
	jmp     _validate_data
;
; --positionx;
;
L08F6:	dec     _positionx
;
; validate_data();
;
	jmp     _validate_data

.endproc

; ---------------------------------------------------------------
; void __near__ colour_banner (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_colour_banner: near

.segment	"CODE"

;
; for(x=25;x<40;++x) {
;
	jsr     decsp2
	lda     #$19
	ldy     #$01
L08F8:	sta     (sp),y
	cmp     #$28
	bcs     L07F3
;
; for(y=0;y<25;++y) {
;
	lda     #$00
	dey
L08F7:	sta     (sp),y
	cmp     #$19
	bcs     L07F4
;
; POKE(COLOR_MEM+x+y*40,0x67);
;
	iny
	lda     (sp),y
	pha
	lda     #$00
	clc
	adc     #$44
	tax
	pla
	jsr     pushax
	ldy     #$02
	lda     (sp),y
	jsr     pusha0
	lda     #$28
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	stx     ptr1+1
	lda     #$67
	ldy     #$00
	sta     (ptr1),y
;
; for(y=0;y<25;++y) {
;
	clc
	lda     #$01
	adc     (sp),y
	jmp     L08F7
;
; for(x=25;x<40;++x) {
;
L07F4:	iny
	clc
	tya
	adc     (sp),y
	jmp     L08F8
;
; }
;
L07F3:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; unsigned char oldx=0;
;
	lda     #$00
	jsr     pusha
;
; unsigned char oldy=0;
;
	jsr     pusha
;
; char oldo=0;
;
	jsr     pusha
;
; char iv=TRUE;
;
	jsr     decsp1
	lda     #$FF
	jsr     pusha
;
; graphics_monochrome();
;
	jsr     _graphics_monochrome
;
; colour_banner();
;
	jsr     _colour_banner
;
; positionx=6;
;
	lda     #$06
	sta     _positionx
;
; positiony=16;
;
	lda     #$10
	sta     _positiony
;
; loadVICFont(2);
;
	lda     #$02
	jsr     _loadVICFont
;
; printat(204,17,"c64maze");
;
	jsr     decsp4
	lda     #$CC
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$11
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L0817)
	ldx     #>(L0817)
	jsr     _printat
;
; loadVICFont(1);
;
	lda     #$01
	jsr     _loadVICFont
;
; box(251,53,278,84);
;
	jsr     decsp6
	lda     #$FB
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$35
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$16
	ldy     #$00
	sta     (sp),y
	iny
	tya
	sta     (sp),y
	ldx     #$00
	lda     #$54
	jsr     _box
;
; printat(260,55,"t");
;
	jsr     decsp4
	lda     #$04
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$37
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L0823)
	ldx     #>(L0823)
	jsr     _printat
;
; printat(252,65,"f+g");
;
	jsr     decsp4
	lda     #$FC
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$41
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L0828)
	ldx     #>(L0828)
	jsr     _printat
;
; printat(260,75,"v");
;
	jsr     decsp4
	lda     #$04
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$01
	sta     (sp),y
	lda     #$4B
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L082D)
	ldx     #>(L082D)
	jsr     _printat
;
; printat(207,170,"d. bucci 2017");
;
	jsr     decsp4
	lda     #$CF
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$AA
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L0832)
	ldx     #>(L0832)
	jsr     _printat
;
; loadVICFont(2);
;
	lda     #$02
	jsr     _loadVICFont
;
; line(200,0,200,199);
;
	jsr     decsp6
	lda     #$C8
	ldy     #$04
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	ldy     #$02
	sta     (sp),y
	iny
	sta     (sp),y
	lda     #$C8
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	tax
	lda     #$C7
	jsr     _line
;
; if(oldx!=positionx || oldy!=positiony || oldo!=orientation) {
;
L083B:	ldy     #$04
	lda     (sp),y
	cmp     _positionx
	bne     L0900
	dey
	lda     (sp),y
	cmp     _positiony
	bne     L0900
	dey
	lda     (sp),y
	cmp     _orientation
	jeq     L083F
;
; oldx=positionx;
;
L0900:	lda     _positionx
	ldy     #$04
	sta     (sp),y
;
; oldy=positiony;
;
	lda     _positiony
	dey
	sta     (sp),y
;
; oldo=orientation;
;
	lda     _orientation
	dey
	sta     (sp),y
;
; clearMazeRegion();
;
	jsr     _clearMazeRegion
;
; drawLabyrinthView();
;
	jsr     _drawLabyrinthView
;
; if (positionx==startx && positiony==starty)
;
	lda     _startx
	cmp     _positionx
	bne     L0903
	lda     _starty
	cmp     _positiony
	bne     L0903
;
; printat(40,100,"step in!");
;
	jsr     decsp4
	lda     #$28
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$64
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L0851)
	ldx     #>(L0851)
	jsr     _printat
;
; if (positionx==exitx && positiony==exity) {
;
L0903:	lda     _exitx
	cmp     _positionx
	bne     L0906
	lda     _exity
	cmp     _positiony
	bne     L0906
;
; printat(40,100,"way out!");
;
	jsr     decsp4
	lda     #$28
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #$64
	ldy     #$00
	sta     (sp),y
	iny
	lda     #$00
	sta     (sp),y
	lda     #<(L085A)
	ldx     #>(L085A)
	jsr     _printat
;
; POKE(53280U,4);
;
L0906:	lda     #$04
	sta     $D020
;
; c=cgetc();
;
L083F:	jsr     _cgetc
	ldy     #$01
	sta     (sp),y
;
; iv=FALSE;
;
	lda     #$00
	dey
	sta     (sp),y
;
; switch(c) {
;
	iny
	lda     (sp),y
;
; };
;
	cmp     #$46
	beq     L0907
	cmp     #$47
	beq     L0909
	cmp     #$54
	beq     L086C
	cmp     #$56
	beq     L086F
	jmp     L090B
;
; move_forward();
;
L086C:	jsr     _move_forward
;
; break;
;
	jmp     L086A
;
; move_backwards();
;
L086F:	jsr     _move_backwards
;
; break;
;
	jmp     L086A
;
; if(orientation==3)
;
L0907:	lda     _orientation
	cmp     #$03
	bne     L0908
;
; orientation=0;
;
	lda     #$00
	sta     _orientation
;
; else
;
	jmp     L086A
;
; ++orientation;
;
L0908:	inc     _orientation
;
; break;
;
	jmp     L086A
;
; if(orientation==0)
;
L0909:	lda     _orientation
	bne     L090A
;
; orientation=3;
;
	lda     #$03
	sta     _orientation
;
; else
;
	jmp     L086A
;
; --orientation;
;
L090A:	dec     _orientation
;
; break;
;
	jmp     L086A
;
; iv=TRUE;
;
L090B:	lda     #$FF
	dey
	sta     (sp),y
;
; } while(iv==TRUE);
;
L086A:	ldy     #$00
	lda     (sp),y
	cmp     #$FF
	beq     L083F
;
; if(labyrinth[positionx+positiony*labyrinthSizeX]=='*') {
;
	lda     _positionx
	jsr     pusha0
	lda     _positiony
	jsr     pusha0
	lda     _labyrinthSizeX
	jsr     tosumula0
	jsr     tosaddax
	sta     ptr1
	txa
	clc
	adc     #>(_labyrinth)
	sta     ptr1+1
	ldy     #<(_labyrinth)
	lda     (ptr1),y
	cmp     #$2A
	jne     L083B
;
; POKE(53280U,1);
;
	lda     #$01
	sta     $D020
;
; positionx=oldx;
;
	ldy     #$04
	lda     (sp),y
	sta     _positionx
;
; positiony=oldy;
;
	dey
	lda     (sp),y
	sta     _positiony
;
; while(TRUE) {
;
	jmp     L083B

.endproc

